
<?php
  /*
    Copyright 2010 Persistent Systems Limited

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
   */

    /**
    * This code was generated by the tool 'PHPDataSvcUtil.php'.
    * Runtime Version:1.0
    *
    * Changes to this file may cause incorrect behavior and will be lost if
    * the code is regenerated.
    */

    require_once 'Context/ObjectContext.php';
    /**
    * Defines default OData Service URL for this proxy class
    */
    define("DEFAULT_ODATA_SERVICE_URL", "http://realestateservice.cloudapp.net/OdataService.svc");
    
   /**
    * @class:ListingImage
    * @type:EntityType
    * @key:LN
    * @key:LnSubId
    */
    class ListingImage extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int64
        */
        public $LN;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $LnSubId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:100
        * @FixedLength:false
        */
        public $ImageURL;
    

       /**
        * Function to create an instance of ListingImage
        * @param Edm.Int64 $LN
        * @param Edm.Int32 $LnSubId
        */
        public static function CreateListingImage(
            $LN, 
            $LnSubId)
        {   
            $ListingImage = new ListingImage();
            $ListingImage->LN = $LN;
            $ListingImage->LnSubId = $LnSubId;
            return $ListingImage;
        }

       /**
        * Constructor for ListingImage
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:LCBORSubDivision
    * @type:EntityType
    * @key:PKey
    */
    class LCBORSubDivision extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $PKey;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $County;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $City;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $SubDiv;
    

       /**
        * Function to create an instance of LCBORSubDivision
        * @param Edm.Int32 $PKey
        * @param Edm.String $SubDiv
        */
        public static function CreateLCBORSubDivision(
            $PKey, 
            $SubDiv)
        {   
            $LCBORSubDivision = new LCBORSubDivision();
            $LCBORSubDivision->PKey = $PKey;
            $LCBORSubDivision->SubDiv = $SubDiv;
            return $LCBORSubDivision;
        }

       /**
        * Constructor for LCBORSubDivision
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:RetsCity
    * @type:EntityType
    * @key:PKey
    * @key:State
    * @key:City
    */
    class RetsCity extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $PKey;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:100
        * @FixedLength:false
        */
        public $State;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $County;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $City;
    

       /**
        * Function to create an instance of RetsCity
        * @param Edm.Int32 $PKey
        * @param Edm.String $State
        * @param Edm.String $City
        */
        public static function CreateRetsCity(
            $PKey, 
            $State, 
            $City)
        {   
            $RetsCity = new RetsCity();
            $RetsCity->PKey = $PKey;
            $RetsCity->State = $State;
            $RetsCity->City = $City;
            return $RetsCity;
        }

       /**
        * Constructor for RetsCity
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:RetsCounty
    * @type:EntityType
    * @key:PKey
    * @key:State
    * @key:County
    */
    class RetsCounty extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $PKey;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:100
        * @FixedLength:false
        */
        public $State;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $County;
    

       /**
        * Function to create an instance of RetsCounty
        * @param Edm.Int32 $PKey
        * @param Edm.String $State
        * @param Edm.String $County
        */
        public static function CreateRetsCounty(
            $PKey, 
            $State, 
            $County)
        {   
            $RetsCounty = new RetsCounty();
            $RetsCounty->PKey = $PKey;
            $RetsCounty->State = $State;
            $RetsCounty->County = $County;
            return $RetsCounty;
        }

       /**
        * Constructor for RetsCounty
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:LCBORDetailListing
    * @type:EntityType
    * @key:PKey
    * @key:HouNo
    * @key:Price
    * @key:Beds
    * @key:Baths
    * @key:Remark
    * @key:VideoURL
    * @key:LN
    */
    class LCBORDetailListing extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $PKey;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int64
        */
        public $LN;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:25
        * @FixedLength:false
        */
        public $HouNo;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Stre;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:25
        * @FixedLength:false
        */
        public $StrSuff;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:25
        * @FixedLength:false
        */
        public $DirSuff;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $SubDiv;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $City;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $County;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:100
        * @FixedLength:false
        */
        public $State;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:10
        * @FixedLength:false
        */
        public $Zip;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $Property;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $PropType;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:25
        * @FixedLength:false
        */
        public $Status;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $SquFeet;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Decimal
        */
        public $Price;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Double
        */
        public $Acre;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Decimal
        */
        public $Beds;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Decimal
        */
        public $Baths;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:52
        * @FixedLength:false
        */
        public $Loc;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:Max
        * @FixedLength:false
        */
        public $Remark;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:25
        * @FixedLength:false
        */
        public $WaterFront;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:25
        * @FixedLength:false
        */
        public $ExtBed;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:25
        * @FixedLength:false
        */
        public $ExtBath;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $AgID;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:101
        * @FixedLength:false
        */
        public $AgNam;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $OffID;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:250
        * @FixedLength:false
        */
        public $OffNam;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:500
        * @FixedLength:false
        */
        public $VideoURL;
    

       /**
        * Function to create an instance of LCBORDetailListing
        * @param Edm.Int32 $PKey
        * @param Edm.Int64 $LN
        * @param Edm.String $HouNo
        * @param Edm.Decimal $Price
        * @param Edm.Decimal $Beds
        * @param Edm.Decimal $Baths
        * @param Edm.String $Remark
        * @param Edm.String $VideoURL
        */
        public static function CreateLCBORDetailListing(
            $PKey, 
            $LN, 
            $HouNo, 
            $Price, 
            $Beds, 
            $Baths, 
            $Remark, 
            $VideoURL)
        {   
            $LCBORDetailListing = new LCBORDetailListing();
            $LCBORDetailListing->PKey = $PKey;
            $LCBORDetailListing->LN = $LN;
            $LCBORDetailListing->HouNo = $HouNo;
            $LCBORDetailListing->Price = $Price;
            $LCBORDetailListing->Beds = $Beds;
            $LCBORDetailListing->Baths = $Baths;
            $LCBORDetailListing->Remark = $Remark;
            $LCBORDetailListing->VideoURL = $VideoURL;
            return $LCBORDetailListing;
        }

       /**
        * Constructor for LCBORDetailListing
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:LCBORSearchListing
    * @type:EntityType
    * @key:PKey
    * @key:HouNo
    * @key:SubDiv
    * @key:Price
    * @key:Beds
    * @key:Baths
    * @key:YrBuilt
    * @key:Garage
    * @key:Level
    * @key:Parking
    * @key:Terms
    * @key:PropSubtype
    * @key:ImgNam
    * @key:LN
    */
    class LCBORSearchListing extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $PKey;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int64
        */
        public $LN;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:25
        * @FixedLength:false
        */
        public $HouNo;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Stre;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:25
        * @FixedLength:false
        */
        public $StrSuff;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:25
        * @FixedLength:false
        */
        public $DirSuff;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $SubDiv;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $City;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $County;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:100
        * @FixedLength:false
        */
        public $State;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:10
        * @FixedLength:false
        */
        public $Zip;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Decimal
        */
        public $Price;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Decimal
        */
        public $Beds;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Decimal
        */
        public $Baths;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:25
        * @FixedLength:false
        */
        public $ExtBed;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:25
        * @FixedLength:false
        */
        public $ExtBath;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $SquFeet;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $YrBuilt;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Double
        */
        public $Acre;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:250
        * @FixedLength:false
        */
        public $Garage;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Level;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:25
        * @FixedLength:false
        */
        public $Parking;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $Terms;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $Property;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $PropType;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:100
        * @FixedLength:false
        */
        public $PropSubtype;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:25
        * @FixedLength:false
        */
        public $Location;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:25
        * @FixedLength:false
        */
        public $Zone;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Lake;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:1
        * @FixedLength:false
        */
        public $Foreclosure;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:1
        * @FixedLength:false
        */
        public $ShortSales;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $AgID;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:101
        * @FixedLength:false
        */
        public $AgNam;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $OffID;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:250
        * @FixedLength:false
        */
        public $OffNam;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.DateTime
        */
        public $CreDate;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:80
        * @FixedLength:false
        */
        public $ImgNam;
    

       /**
        * Function to create an instance of LCBORSearchListing
        * @param Edm.Int32 $PKey
        * @param Edm.Int64 $LN
        * @param Edm.String $HouNo
        * @param Edm.String $SubDiv
        * @param Edm.Decimal $Price
        * @param Edm.Decimal $Beds
        * @param Edm.Decimal $Baths
        * @param Edm.Int32 $YrBuilt
        * @param Edm.String $Garage
        * @param Edm.String $Level
        * @param Edm.String $Parking
        * @param Edm.String $Terms
        * @param Edm.String $PropSubtype
        * @param Edm.String $ImgNam
        */
        public static function CreateLCBORSearchListing(
            $PKey, 
            $LN, 
            $HouNo, 
            $SubDiv, 
            $Price, 
            $Beds, 
            $Baths, 
            $YrBuilt, 
            $Garage, 
            $Level, 
            $Parking, 
            $Terms, 
            $PropSubtype, 
            $ImgNam)
        {   
            $LCBORSearchListing = new LCBORSearchListing();
            $LCBORSearchListing->PKey = $PKey;
            $LCBORSearchListing->LN = $LN;
            $LCBORSearchListing->HouNo = $HouNo;
            $LCBORSearchListing->SubDiv = $SubDiv;
            $LCBORSearchListing->Price = $Price;
            $LCBORSearchListing->Beds = $Beds;
            $LCBORSearchListing->Baths = $Baths;
            $LCBORSearchListing->YrBuilt = $YrBuilt;
            $LCBORSearchListing->Garage = $Garage;
            $LCBORSearchListing->Level = $Level;
            $LCBORSearchListing->Parking = $Parking;
            $LCBORSearchListing->Terms = $Terms;
            $LCBORSearchListing->PropSubtype = $PropSubtype;
            $LCBORSearchListing->ImgNam = $ImgNam;
            return $LCBORSearchListing;
        }

       /**
        * Constructor for LCBORSearchListing
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:INEADetailListing
    * @type:EntityType
    * @key:PKey
    * @key:LN
    */
    class INEADetailListing extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $PKey;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int64
        */
        public $LN;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Stre;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $City;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $County;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:10
        * @FixedLength:false
        */
        public $Zip;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:25
        * @FixedLength:false
        */
        public $Property;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $PropType;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Decimal
        */
        public $Price;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Decimal
        */
        public $Beds;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Decimal
        */
        public $Baths;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:Max
        * @FixedLength:false
        */
        public $Remark;
    

       /**
        * Function to create an instance of INEADetailListing
        * @param Edm.Int32 $PKey
        * @param Edm.Int64 $LN
        * @param Edm.String $Property
        * @param Edm.Decimal $Price
        * @param Edm.Decimal $Beds
        * @param Edm.Decimal $Baths
        */
        public static function CreateINEADetailListing(
            $PKey, 
            $LN, 
            $Property, 
            $Price, 
            $Beds, 
            $Baths)
        {   
            $INEADetailListing = new INEADetailListing();
            $INEADetailListing->PKey = $PKey;
            $INEADetailListing->LN = $LN;
            $INEADetailListing->Property = $Property;
            $INEADetailListing->Price = $Price;
            $INEADetailListing->Beds = $Beds;
            $INEADetailListing->Baths = $Baths;
            return $INEADetailListing;
        }

       /**
        * Constructor for INEADetailListing
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:INEASearchListing
    * @type:EntityType
    * @key:PKey
    * @key:LN
    */
    class INEASearchListing extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $PKey;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int64
        */
        public $LN;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Country;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Stre;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $City;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:100
        * @FixedLength:false
        */
        public $State;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:10
        * @FixedLength:false
        */
        public $Zip;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $County;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:250
        * @FixedLength:false
        */
        public $Property;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:8000
        * @FixedLength:false
        */
        public $PropType;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Decimal
        */
        public $Price;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Decimal
        */
        public $Beds;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Decimal
        */
        public $Baths;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:250
        * @FixedLength:false
        */
        public $Tenure;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:100
        * @FixedLength:false
        */
        public $AgID;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:101
        * @FixedLength:false
        */
        public $AgNam;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.DateTime
        */
        public $CreDate;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:80
        * @FixedLength:false
        */
        public $ImgNam;
    

       /**
        * Function to create an instance of INEASearchListing
        * @param Edm.Int32 $PKey
        * @param Edm.Int64 $LN
        * @param Edm.String $Stre
        * @param Edm.String $City
        * @param Edm.String $State
        * @param Edm.String $Zip
        * @param Edm.String $County
        * @param Edm.Decimal $Price
        * @param Edm.Decimal $Beds
        * @param Edm.Decimal $Baths
        * @param Edm.String $Tenure
        * @param Edm.String $ImgNam
        */
        public static function CreateINEASearchListing(
            $PKey, 
            $LN, 
            $Stre, 
            $City, 
            $State, 
            $Zip, 
            $County, 
            $Price, 
            $Beds, 
            $Baths, 
            $Tenure, 
            $ImgNam)
        {   
            $INEASearchListing = new INEASearchListing();
            $INEASearchListing->PKey = $PKey;
            $INEASearchListing->LN = $LN;
            $INEASearchListing->Stre = $Stre;
            $INEASearchListing->City = $City;
            $INEASearchListing->State = $State;
            $INEASearchListing->Zip = $Zip;
            $INEASearchListing->County = $County;
            $INEASearchListing->Price = $Price;
            $INEASearchListing->Beds = $Beds;
            $INEASearchListing->Baths = $Baths;
            $INEASearchListing->Tenure = $Tenure;
            $INEASearchListing->ImgNam = $ImgNam;
            return $INEASearchListing;
        }

       /**
        * Constructor for INEASearchListing
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:INEACity
    * @type:EntityType
    * @key:PKey
    */
    class INEACity extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $PKey;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Country;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $County;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $City;
    

       /**
        * Function to create an instance of INEACity
        * @param Edm.Int32 $PKey
        * @param Edm.String $County
        * @param Edm.String $City
        */
        public static function CreateINEACity(
            $PKey, 
            $County, 
            $City)
        {   
            $INEACity = new INEACity();
            $INEACity->PKey = $PKey;
            $INEACity->County = $County;
            $INEACity->City = $City;
            return $INEACity;
        }

       /**
        * Constructor for INEACity
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:RetsProperty
    * @type:EntityType
    * @key:PKey
    * @key:PropType
    */
    class RetsProperty extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $PKey;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $PropType;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $PropName;
    

       /**
        * Function to create an instance of RetsProperty
        * @param Edm.Int32 $PKey
        * @param Edm.String $PropType
        */
        public static function CreateRetsProperty(
            $PKey, 
            $PropType)
        {   
            $RetsProperty = new RetsProperty();
            $RetsProperty->PKey = $PKey;
            $RetsProperty->PropType = $PropType;
            return $RetsProperty;
        }

       /**
        * Constructor for RetsProperty
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:RetsListingImage
    * @type:EntityType
    * @key:PKey
    * @key:LN
    * @key:LnSubId
    */
    class RetsListingImage extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $PKey;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:25
        * @FixedLength:false
        */
        public $LN;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $LnSubId;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:100
        * @FixedLength:false
        */
        public $ImageURL;
    

       /**
        * Function to create an instance of RetsListingImage
        * @param Edm.Int32 $PKey
        * @param Edm.String $LN
        * @param Edm.Int32 $LnSubId
        */
        public static function CreateRetsListingImage(
            $PKey, 
            $LN, 
            $LnSubId)
        {   
            $RetsListingImage = new RetsListingImage();
            $RetsListingImage->PKey = $PKey;
            $RetsListingImage->LN = $LN;
            $RetsListingImage->LnSubId = $LnSubId;
            return $RetsListingImage;
        }

       /**
        * Constructor for RetsListingImage
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:RetsProviderName
    * @type:EntityType
    * @key:PKey
    * @key:PName
    */
    class RetsProviderName extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $PKey;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:200
        * @FixedLength:false
        */
        public $PName;
    

       /**
        * Function to create an instance of RetsProviderName
        * @param Edm.Int32 $PKey
        * @param Edm.String $PName
        */
        public static function CreateRetsProviderName(
            $PKey, 
            $PName)
        {   
            $RetsProviderName = new RetsProviderName();
            $RetsProviderName->PKey = $PKey;
            $RetsProviderName->PName = $PName;
            return $RetsProviderName;
        }

       /**
        * Constructor for RetsProviderName
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:RetsSearchListing
    * @type:EntityType
    * @key:PKey
    * @key:LN
    * @key:HouNo
    * @key:Status
    * @key:Price
    * @key:Beds
    * @key:Baths
    * @key:YrBuilt
    * @key:SchDist
    * @key:ImgNam
    */
    class RetsSearchListing extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $PKey;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:25
        * @FixedLength:false
        */
        public $LN;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:25
        * @FixedLength:false
        */
        public $HouNo;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Stre;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:25
        * @FixedLength:false
        */
        public $StrSuff;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:25
        * @FixedLength:false
        */
        public $DirSuff;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $City;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:100
        * @FixedLength:false
        */
        public $State;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:10
        * @FixedLength:false
        */
        public $Zip;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $County;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $PropType;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:22
        * @FixedLength:false
        */
        public $Status;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $SquFeet;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Decimal
        */
        public $Price;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Double
        */
        public $Acre;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Decimal
        */
        public $Beds;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Decimal
        */
        public $Baths;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $YrBuilt;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $WatFront;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $PropView;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $SchDist;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $AgID;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:101
        * @FixedLength:false
        */
        public $AgNam;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $OffID;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:250
        * @FixedLength:false
        */
        public $OffNam;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.DateTime
        */
        public $CreDate;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:80
        * @FixedLength:false
        */
        public $ImgNam;
    

       /**
        * Function to create an instance of RetsSearchListing
        * @param Edm.Int32 $PKey
        * @param Edm.String $LN
        * @param Edm.String $HouNo
        * @param Edm.String $Status
        * @param Edm.Decimal $Price
        * @param Edm.Decimal $Beds
        * @param Edm.Decimal $Baths
        * @param Edm.Int32 $YrBuilt
        * @param Edm.String $SchDist
        * @param Edm.String $ImgNam
        */
        public static function CreateRetsSearchListing(
            $PKey, 
            $LN, 
            $HouNo, 
            $Status, 
            $Price, 
            $Beds, 
            $Baths, 
            $YrBuilt, 
            $SchDist, 
            $ImgNam)
        {   
            $RetsSearchListing = new RetsSearchListing();
            $RetsSearchListing->PKey = $PKey;
            $RetsSearchListing->LN = $LN;
            $RetsSearchListing->HouNo = $HouNo;
            $RetsSearchListing->Status = $Status;
            $RetsSearchListing->Price = $Price;
            $RetsSearchListing->Beds = $Beds;
            $RetsSearchListing->Baths = $Baths;
            $RetsSearchListing->YrBuilt = $YrBuilt;
            $RetsSearchListing->SchDist = $SchDist;
            $RetsSearchListing->ImgNam = $ImgNam;
            return $RetsSearchListing;
        }

       /**
        * Constructor for RetsSearchListing
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:RetsListingsStatu
    * @type:EntityType
    * @key:PKey
    * @key:Status
    */
    class RetsListingsStatu extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $PKey;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:25
        * @FixedLength:false
        */
        public $Status;
    

       /**
        * Function to create an instance of RetsListingsStatu
        * @param Edm.Int32 $PKey
        * @param Edm.String $Status
        */
        public static function CreateRetsListingsStatu(
            $PKey, 
            $Status)
        {   
            $RetsListingsStatu = new RetsListingsStatu();
            $RetsListingsStatu->PKey = $PKey;
            $RetsListingsStatu->Status = $Status;
            return $RetsListingsStatu;
        }

       /**
        * Constructor for RetsListingsStatu
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:RetsListing
    * @type:EntityType
    * @key:PKey
    * @key:LN
    */
    class RetsListing extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $PKey;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:25
        * @FixedLength:false
        */
        public $LN;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:25
        * @FixedLength:false
        */
        public $HouNo;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Stre;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:25
        * @FixedLength:false
        */
        public $StrSuff;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:25
        * @FixedLength:false
        */
        public $DirSuff;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $City;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:100
        * @FixedLength:false
        */
        public $State;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:10
        * @FixedLength:false
        */
        public $Zip;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $PropType;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:22
        * @FixedLength:false
        */
        public $Status;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $SquFeet;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Decimal
        */
        public $Price;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Double
        */
        public $Acre;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Decimal
        */
        public $Beds;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Decimal
        */
        public $Baths;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:52
        * @FixedLength:false
        */
        public $Loc;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $YrBuilt;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:Max
        * @FixedLength:false
        */
        public $Remark;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:1000
        * @FixedLength:false
        */
        public $WatFront;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:1000
        * @FixedLength:false
        */
        public $Style;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:1000
        * @FixedLength:false
        */
        public $IntFea;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:1000
        * @FixedLength:false
        */
        public $ExtFea;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:1000
        * @FixedLength:false
        */
        public $PropView;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:1000
        * @FixedLength:false
        */
        public $AppThtStay;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $SchDist;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $HiSch;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $JuHiSch;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $EleSch;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $AgID;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:101
        * @FixedLength:false
        */
        public $AgNam;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $OffID;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:250
        * @FixedLength:false
        */
        public $OffNam;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:4000
        * @FixedLength:false
        */
        public $Disclaimer;
    

       /**
        * Function to create an instance of RetsListing
        * @param Edm.Int32 $PKey
        * @param Edm.String $LN
        * @param Edm.String $HouNo
        * @param Edm.String $Status
        * @param Edm.Decimal $Price
        * @param Edm.Decimal $Beds
        * @param Edm.Decimal $Baths
        * @param Edm.Int32 $YrBuilt
        * @param Edm.String $SchDist
        */
        public static function CreateRetsListing(
            $PKey, 
            $LN, 
            $HouNo, 
            $Status, 
            $Price, 
            $Beds, 
            $Baths, 
            $YrBuilt, 
            $SchDist)
        {   
            $RetsListing = new RetsListing();
            $RetsListing->PKey = $PKey;
            $RetsListing->LN = $LN;
            $RetsListing->HouNo = $HouNo;
            $RetsListing->Status = $Status;
            $RetsListing->Price = $Price;
            $RetsListing->Beds = $Beds;
            $RetsListing->Baths = $Baths;
            $RetsListing->YrBuilt = $YrBuilt;
            $RetsListing->SchDist = $SchDist;
            return $RetsListing;
        }

       /**
        * Constructor for RetsListing
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:RetsElementarySchool
    * @type:EntityType
    * @key:PKey
    * @key:ElementarySchool
    */
    class RetsElementarySchool extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $PKey;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $ElementarySchool;
    

       /**
        * Function to create an instance of RetsElementarySchool
        * @param Edm.Int32 $PKey
        * @param Edm.String $ElementarySchool
        */
        public static function CreateRetsElementarySchool(
            $PKey, 
            $ElementarySchool)
        {   
            $RetsElementarySchool = new RetsElementarySchool();
            $RetsElementarySchool->PKey = $PKey;
            $RetsElementarySchool->ElementarySchool = $ElementarySchool;
            return $RetsElementarySchool;
        }

       /**
        * Constructor for RetsElementarySchool
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:RetsHighSchool
    * @type:EntityType
    * @key:PKey
    * @key:HighSchool
    */
    class RetsHighSchool extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $PKey;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $HighSchool;
    

       /**
        * Function to create an instance of RetsHighSchool
        * @param Edm.Int32 $PKey
        * @param Edm.String $HighSchool
        */
        public static function CreateRetsHighSchool(
            $PKey, 
            $HighSchool)
        {   
            $RetsHighSchool = new RetsHighSchool();
            $RetsHighSchool->PKey = $PKey;
            $RetsHighSchool->HighSchool = $HighSchool;
            return $RetsHighSchool;
        }

       /**
        * Constructor for RetsHighSchool
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:RetsMiddleSchool
    * @type:EntityType
    * @key:PKey
    * @key:MiddleSchool
    */
    class RetsMiddleSchool extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $PKey;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $MiddleSchool;
    

       /**
        * Function to create an instance of RetsMiddleSchool
        * @param Edm.Int32 $PKey
        * @param Edm.String $MiddleSchool
        */
        public static function CreateRetsMiddleSchool(
            $PKey, 
            $MiddleSchool)
        {   
            $RetsMiddleSchool = new RetsMiddleSchool();
            $RetsMiddleSchool->PKey = $PKey;
            $RetsMiddleSchool->MiddleSchool = $MiddleSchool;
            return $RetsMiddleSchool;
        }

       /**
        * Constructor for RetsMiddleSchool
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:RetsSubDivision
    * @type:EntityType
    * @key:PKey
    * @key:SubDivision
    */
    class RetsSubDivision extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $PKey;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $SubDivision;
    

       /**
        * Function to create an instance of RetsSubDivision
        * @param Edm.Int32 $PKey
        * @param Edm.String $SubDivision
        */
        public static function CreateRetsSubDivision(
            $PKey, 
            $SubDivision)
        {   
            $RetsSubDivision = new RetsSubDivision();
            $RetsSubDivision->PKey = $PKey;
            $RetsSubDivision->SubDivision = $SubDivision;
            return $RetsSubDivision;
        }

       /**
        * Constructor for RetsSubDivision
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:RetsSchoolDistrict
    * @type:EntityType
    * @key:PKey
    * @key:SchoolDistrict
    */
    class RetsSchoolDistrict extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $PKey;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:1000
        * @FixedLength:false
        */
        public $SchoolDistrict;
    

       /**
        * Function to create an instance of RetsSchoolDistrict
        * @param Edm.Int32 $PKey
        * @param Edm.String $SchoolDistrict
        */
        public static function CreateRetsSchoolDistrict(
            $PKey, 
            $SchoolDistrict)
        {   
            $RetsSchoolDistrict = new RetsSchoolDistrict();
            $RetsSchoolDistrict->PKey = $PKey;
            $RetsSchoolDistrict->SchoolDistrict = $SchoolDistrict;
            return $RetsSchoolDistrict;
        }

       /**
        * Constructor for RetsSchoolDistrict
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:RetsArea
    * @type:EntityType
    * @key:PKey
    * @key:Area
    */
    class RetsArea extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $PKey;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:1000
        * @FixedLength:false
        */
        public $Area;
    

       /**
        * Function to create an instance of RetsArea
        * @param Edm.Int32 $PKey
        * @param Edm.String $Area
        */
        public static function CreateRetsArea(
            $PKey, 
            $Area)
        {   
            $RetsArea = new RetsArea();
            $RetsArea->PKey = $PKey;
            $RetsArea->Area = $Area;
            return $RetsArea;
        }

       /**
        * Constructor for RetsArea
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:RetsLogo
    * @type:EntityType
    * @key:PKey
    * @key:LogoURL
    */
    class RetsLogo extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $PKey;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:120
        * @FixedLength:false
        */
        public $LogoURL;
    

       /**
        * Function to create an instance of RetsLogo
        * @param Edm.Int32 $PKey
        * @param Edm.String $LogoURL
        */
        public static function CreateRetsLogo(
            $PKey, 
            $LogoURL)
        {   
            $RetsLogo = new RetsLogo();
            $RetsLogo->PKey = $PKey;
            $RetsLogo->LogoURL = $LogoURL;
            return $RetsLogo;
        }

       /**
        * Constructor for RetsLogo
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:GenericRetsSearchListing
    * @type:EntityType
    * @key:PKey
    * @key:LN
    */
    class GenericRetsSearchListing extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $PKey;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:25
        * @FixedLength:false
        */
        public $LN;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:25
        * @FixedLength:false
        */
        public $HouNo;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Stre;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:25
        * @FixedLength:false
        */
        public $StrSuff;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:25
        * @FixedLength:false
        */
        public $DirPre;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:25
        * @FixedLength:false
        */
        public $DirSuff;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $City;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:100
        * @FixedLength:false
        */
        public $State;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:10
        * @FixedLength:false
        */
        public $Zip;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $County;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $PropType;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Status;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $SquFeet;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Decimal
        */
        public $Price;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Double
        */
        public $Acre;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Decimal
        */
        public $Beds;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Decimal
        */
        public $Baths;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Double
        */
        public $Lat;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Double
        */
        public $Lon;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $PropView;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $WatFront;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $SubDiv;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:25
        * @FixedLength:false
        */
        public $Area;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $HiSch;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $JuHiSch;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $EleSch;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:1000
        * @FixedLength:false
        */
        public $SchDist;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:100
        * @FixedLength:false
        */
        public $AgID;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:101
        * @FixedLength:false
        */
        public $AgNam;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:100
        * @FixedLength:false
        */
        public $OffID;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:250
        * @FixedLength:false
        */
        public $OffNam;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.DateTime
        */
        public $CreDate;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:100
        * @FixedLength:false
        */
        public $ImgNam;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:120
        * @FixedLength:false
        */
        public $Logo;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.DateTime
        */
        public $LUD;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:1
        * @FixedLength:false
        */
        public $AddrYN;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:4000
        * @FixedLength:false
        */
        public $Disclaimer;
    

       /**
        * Function to create an instance of GenericRetsSearchListing
        * @param Edm.Int32 $PKey
        * @param Edm.String $LN
        * @param Edm.String $HouNo
        * @param Edm.String $State
        * @param Edm.Decimal $Price
        * @param Edm.Double $Acre
        * @param Edm.Decimal $Beds
        * @param Edm.Decimal $Baths
        * @param Edm.String $SubDiv
        * @param Edm.String $Area
        * @param Edm.String $HiSch
        * @param Edm.String $JuHiSch
        * @param Edm.String $EleSch
        * @param Edm.String $SchDist
        * @param Edm.String $ImgNam
        * @param Edm.String $Logo
        * @param Edm.DateTime $LUD
        * @param Edm.String $AddrYN
        */
        public static function CreateGenericRetsSearchListing(
            $PKey, 
            $LN, 
            $HouNo, 
            $State, 
            $Price, 
            $Acre, 
            $Beds, 
            $Baths, 
            $SubDiv, 
            $Area, 
            $HiSch, 
            $JuHiSch, 
            $EleSch, 
            $SchDist, 
            $ImgNam, 
            $Logo, 
            $LUD, 
            $AddrYN)
        {   
            $GenericRetsSearchListing = new GenericRetsSearchListing();
            $GenericRetsSearchListing->PKey = $PKey;
            $GenericRetsSearchListing->LN = $LN;
            $GenericRetsSearchListing->HouNo = $HouNo;
            $GenericRetsSearchListing->State = $State;
            $GenericRetsSearchListing->Price = $Price;
            $GenericRetsSearchListing->Acre = $Acre;
            $GenericRetsSearchListing->Beds = $Beds;
            $GenericRetsSearchListing->Baths = $Baths;
            $GenericRetsSearchListing->SubDiv = $SubDiv;
            $GenericRetsSearchListing->Area = $Area;
            $GenericRetsSearchListing->HiSch = $HiSch;
            $GenericRetsSearchListing->JuHiSch = $JuHiSch;
            $GenericRetsSearchListing->EleSch = $EleSch;
            $GenericRetsSearchListing->SchDist = $SchDist;
            $GenericRetsSearchListing->ImgNam = $ImgNam;
            $GenericRetsSearchListing->Logo = $Logo;
            $GenericRetsSearchListing->LUD = $LUD;
            $GenericRetsSearchListing->AddrYN = $AddrYN;
            return $GenericRetsSearchListing;
        }

       /**
        * Constructor for GenericRetsSearchListing
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:GenericRetsSearchListingsXML
    * @type:EntityType
    * @key:PKey
    * @key:LN
    */
    class GenericRetsSearchListingsXML extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $PKey;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:25
        * @FixedLength:false
        */
        public $LN;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:25
        * @FixedLength:false
        */
        public $HouNo;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Stre;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:25
        * @FixedLength:false
        */
        public $StrSuff;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:25
        * @FixedLength:false
        */
        public $DirPre;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:25
        * @FixedLength:false
        */
        public $DirSuff;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $City;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:100
        * @FixedLength:false
        */
        public $State;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:10
        * @FixedLength:false
        */
        public $Zip;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $County;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $PropType;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Status;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $SquFeet;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Decimal
        */
        public $Price;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Double
        */
        public $Acre;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Decimal
        */
        public $Beds;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Decimal
        */
        public $Baths;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Double
        */
        public $Lat;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Double
        */
        public $Lon;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $PropView;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $WatFront;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $SubDiv;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:25
        * @FixedLength:false
        */
        public $Area;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $HiSch;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $JuHiSch;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $EleSch;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:1000
        * @FixedLength:false
        */
        public $SchDist;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:100
        * @FixedLength:false
        */
        public $AgID;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:101
        * @FixedLength:false
        */
        public $AgNam;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:100
        * @FixedLength:false
        */
        public $OffID;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:250
        * @FixedLength:false
        */
        public $OffNam;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.DateTime
        */
        public $CreDate;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:100
        * @FixedLength:false
        */
        public $ImgNam;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:120
        * @FixedLength:false
        */
        public $Logo;
    

       /**
        * Function to create an instance of GenericRetsSearchListingsXML
        * @param Edm.Int32 $PKey
        * @param Edm.String $LN
        * @param Edm.String $HouNo
        * @param Edm.String $State
        * @param Edm.Decimal $Price
        * @param Edm.Double $Acre
        * @param Edm.Decimal $Beds
        * @param Edm.Decimal $Baths
        * @param Edm.String $SubDiv
        * @param Edm.String $Area
        * @param Edm.String $HiSch
        * @param Edm.String $JuHiSch
        * @param Edm.String $EleSch
        * @param Edm.String $SchDist
        * @param Edm.String $ImgNam
        * @param Edm.String $Logo
        */
        public static function CreateGenericRetsSearchListingsXML(
            $PKey, 
            $LN, 
            $HouNo, 
            $State, 
            $Price, 
            $Acre, 
            $Beds, 
            $Baths, 
            $SubDiv, 
            $Area, 
            $HiSch, 
            $JuHiSch, 
            $EleSch, 
            $SchDist, 
            $ImgNam, 
            $Logo)
        {   
            $GenericRetsSearchListingsXML = new GenericRetsSearchListingsXML();
            $GenericRetsSearchListingsXML->PKey = $PKey;
            $GenericRetsSearchListingsXML->LN = $LN;
            $GenericRetsSearchListingsXML->HouNo = $HouNo;
            $GenericRetsSearchListingsXML->State = $State;
            $GenericRetsSearchListingsXML->Price = $Price;
            $GenericRetsSearchListingsXML->Acre = $Acre;
            $GenericRetsSearchListingsXML->Beds = $Beds;
            $GenericRetsSearchListingsXML->Baths = $Baths;
            $GenericRetsSearchListingsXML->SubDiv = $SubDiv;
            $GenericRetsSearchListingsXML->Area = $Area;
            $GenericRetsSearchListingsXML->HiSch = $HiSch;
            $GenericRetsSearchListingsXML->JuHiSch = $JuHiSch;
            $GenericRetsSearchListingsXML->EleSch = $EleSch;
            $GenericRetsSearchListingsXML->SchDist = $SchDist;
            $GenericRetsSearchListingsXML->ImgNam = $ImgNam;
            $GenericRetsSearchListingsXML->Logo = $Logo;
            return $GenericRetsSearchListingsXML;
        }

       /**
        * Constructor for GenericRetsSearchListingsXML
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:INEACounty
    * @type:EntityType
    * @key:PKey
    * @key:Country
    */
    class INEACounty extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $PKey;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Country;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $County;
    

       /**
        * Function to create an instance of INEACounty
        * @param Edm.Int32 $PKey
        * @param Edm.String $Country
        * @param Edm.String $County
        */
        public static function CreateINEACounty(
            $PKey, 
            $Country, 
            $County)
        {   
            $INEACounty = new INEACounty();
            $INEACounty->PKey = $PKey;
            $INEACounty->Country = $Country;
            $INEACounty->County = $County;
            return $INEACounty;
        }

       /**
        * Constructor for INEACounty
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * @class:GenericRetsDetailListing
    * @type:EntityType
    * @key:PKey
    * @key:LN
    * @key:HouNo
    * @key:PropSub
    * @key:Price
    * @key:Acre
    * @key:Beds
    * @key:Baths
    * @key:Remark
    * @key:SchDist
    * @key:PName
    * @key:Logo
    */
    class GenericRetsDetailListing extends Object
    {
        protected $_entityMap = array();
        protected $_entityKey = array();
        protected $_relLinks  = array();
        protected $_baseURI;

    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Int32
        */
        public $PKey;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:25
        * @FixedLength:false
        */
        public $LN;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:25
        * @FixedLength:false
        */
        public $HouNo;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Stre;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:25
        * @FixedLength:false
        */
        public $StrSuff;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:25
        * @FixedLength:false
        */
        public $DirPre;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:25
        * @FixedLength:false
        */
        public $DirSuff;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $City;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:100
        * @FixedLength:false
        */
        public $State;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:10
        * @FixedLength:false
        */
        public $Zip;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $County;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:255
        * @FixedLength:false
        */
        public $PropType;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $PropSub;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $Status;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $SquFeet;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Decimal
        */
        public $Price;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Double
        */
        public $Acre;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Decimal
        */
        public $Beds;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.Decimal
        */
        public $Baths;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:52
        * @FixedLength:false
        */
        public $Loc;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:Max
        * @FixedLength:false
        */
        public $Remark;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:1000
        * @FixedLength:false
        */
        public $WatFront;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:1000
        * @FixedLength:false
        */
        public $Style;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:1000
        * @FixedLength:false
        */
        public $IntFea;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:1000
        * @FixedLength:false
        */
        public $ExtFea;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:1000
        * @FixedLength:false
        */
        public $PropView;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:1000
        * @FixedLength:false
        */
        public $AppThtStay;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $HiSch;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $JuHiSch;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:50
        * @FixedLength:false
        */
        public $EleSch;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:1000
        * @FixedLength:false
        */
        public $SchDist;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.Int32
        */
        public $YrBuilt;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:100
        * @FixedLength:false
        */
        public $AgID;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:101
        * @FixedLength:false
        */
        public $AgNam;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:100
        * @FixedLength:false
        */
        public $OffID;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:250
        * @FixedLength:false
        */
        public $OffNam;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:200
        * @FixedLength:false
        */
        public $PName;
    
       /**
        * @Type:EntityProperty
        * @EdmType:Edm.String
        * @MaxLength:4000
        * @FixedLength:false
        */
        public $Disclaimer;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:300
        * @FixedLength:false
        */
        public $Logo;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.DateTime
        */
        public $LUD;
    
       /**
        * @Type:EntityProperty
        * NotNullable
        * @EdmType:Edm.String
        * @MaxLength:1
        * @FixedLength:false
        */
        public $AddrYN;
    

       /**
        * Function to create an instance of GenericRetsDetailListing
        * @param Edm.Int32 $PKey
        * @param Edm.String $LN
        * @param Edm.String $HouNo
        * @param Edm.String $PropSub
        * @param Edm.Decimal $Price
        * @param Edm.Double $Acre
        * @param Edm.Decimal $Beds
        * @param Edm.Decimal $Baths
        * @param Edm.String $Remark
        * @param Edm.String $SchDist
        * @param Edm.String $PName
        * @param Edm.String $Logo
        * @param Edm.DateTime $LUD
        * @param Edm.String $AddrYN
        */
        public static function CreateGenericRetsDetailListing(
            $PKey, 
            $LN, 
            $HouNo, 
            $PropSub, 
            $Price, 
            $Acre, 
            $Beds, 
            $Baths, 
            $Remark, 
            $SchDist, 
            $PName, 
            $Logo, 
            $LUD, 
            $AddrYN)
        {   
            $GenericRetsDetailListing = new GenericRetsDetailListing();
            $GenericRetsDetailListing->PKey = $PKey;
            $GenericRetsDetailListing->LN = $LN;
            $GenericRetsDetailListing->HouNo = $HouNo;
            $GenericRetsDetailListing->PropSub = $PropSub;
            $GenericRetsDetailListing->Price = $Price;
            $GenericRetsDetailListing->Acre = $Acre;
            $GenericRetsDetailListing->Beds = $Beds;
            $GenericRetsDetailListing->Baths = $Baths;
            $GenericRetsDetailListing->Remark = $Remark;
            $GenericRetsDetailListing->SchDist = $SchDist;
            $GenericRetsDetailListing->PName = $PName;
            $GenericRetsDetailListing->Logo = $Logo;
            $GenericRetsDetailListing->LUD = $LUD;
            $GenericRetsDetailListing->AddrYN = $AddrYN;
            return $GenericRetsDetailListing;
        }

       /**
        * Constructor for GenericRetsDetailListing
        */
        public function __construct($uri = "")
        {
            $this->_objectID = Guid::NewGuid();
            $this->_baseURI = $uri;
    
        }

       /**
        * overring getObjectID() functon of Object class
        */
        public function getObjectID()
        {
            return $this->_objectID;
        }

       /**
        * This function returns the entity keys of this entity.
        */
        public function getEntityKeys()
        {
            return $this->_entityKey;
        }

       /**
        * This function set the entity keys of this entity.
        */
        public function setEntityKeys($entityKey)
        {
            $this->_entityKey = $entityKey;
        }

       /**
        * This function returns the related links of this entity.
        */
        public function getRelatedLinks()
        {
            return $this->_relLinks;
        }

       /**
        * This function set the related links of this entity.
        */
        public function setRelatedLinks($relLinks)
        {
            $this->_relLinks = $relLinks;
        }

       /**
        * Function for getting Entity Type Name corrosponding to navigation Name
        */
        public function getActualEntityTypeName($key)
        {
            if (array_key_exists($key, $this->_entityMap))
            {
                return ($this->_entityMap[$key]);
            }
            return $key;
        }
    }
  
   /**
    * Container class XpioMapRealEstateEntities, Namespace: XpioMapRealEstateModel
    */
    class XpioMapRealEstateEntities extends ObjectContext
    {
    
        protected $_ListingImages;
        protected $_LCBORSubDivisions;
        protected $_RetsCities;
        protected $_RetsCounties;
        protected $_LCBORDetailListings;
        protected $_LCBORSearchListings;
        protected $_INEADetailListings;
        protected $_INEASearchListings;
        protected $_INEACities;
        protected $_RetsProperties;
        protected $_RetsListingImages;
        protected $_RetsProviderNames;
        protected $_RetsSearchListings;
        protected $_RetsListingsStatus;
        protected $_RetsListings;
        protected $_RetsElementarySchools;
        protected $_RetsHighSchools;
        protected $_RetsMiddleSchools;
        protected $_RetsSubDivisions;
        protected $_RetsSchoolDistricts;
        protected $_RetsAreas;
        protected $_RetsLogoes;
        protected $_GenericRetsSearchListings;
        protected $_GenericRetsSearchListingsXMLs;
        protected $_INEACounties;
        protected $_GenericRetsDetailListings;
        
       /**
        * The constructor for XpioMapRealEstateEntities accepting service URI
        */
        public function __construct($uri = "")
        {
            if(strlen($uri) == 0)
            {
                $uri = DEFAULT_ODATA_SERVICE_URL;
            }

            if (Utility::reverseFind($uri, '/') != strlen($uri) - 1)
            {
                $uri = $uri . '/';
            }

            $this->_baseURI = $uri;
            parent::__construct($this->_baseURI);
            $this->_entities = array(
                                "ListingImages",
                                "LCBORSubDivisions",
                                "RetsCities",
                                "RetsCounties",
                                "LCBORDetailListings",
                                "LCBORSearchListings",
                                "INEADetailListings",
                                "INEASearchListings",
                                "INEACities",
                                "RetsProperties",
                                "RetsListingImages",
                                "RetsProviderNames",
                                "RetsSearchListings",
                                "RetsListingsStatus",
                                "RetsListings",
                                "RetsElementarySchools",
                                "RetsHighSchools",
                                "RetsMiddleSchools",
                                "RetsSubDivisions",
                                "RetsSchoolDistricts",
                                "RetsAreas",
                                "RetsLogoes",
                                "GenericRetsSearchListings",
                                "GenericRetsSearchListingsXMLs",
                                "INEACounties",
                                "GenericRetsDetailListings");
            $this->_entitySet2Type = array(
                                            "listingimages" => "ListingImage", 
                                            "lcborsubdivisions" => "LCBORSubDivision", 
                                            "retscities" => "RetsCity", 
                                            "retscounties" => "RetsCounty", 
                                            "lcbordetaillistings" => "LCBORDetailListing", 
                                            "lcborsearchlistings" => "LCBORSearchListing", 
                                            "ineadetaillistings" => "INEADetailListing", 
                                            "ineasearchlistings" => "INEASearchListing", 
                                            "ineacities" => "INEACity", 
                                            "retsproperties" => "RetsProperty", 
                                            "retslistingimages" => "RetsListingImage", 
                                            "retsprovidernames" => "RetsProviderName", 
                                            "retssearchlistings" => "RetsSearchListing", 
                                            "retslistingsstatus" => "RetsListingsStatu", 
                                            "retslistings" => "RetsListing", 
                                            "retselementaryschools" => "RetsElementarySchool", 
                                            "retshighschools" => "RetsHighSchool", 
                                            "retsmiddleschools" => "RetsMiddleSchool", 
                                            "retssubdivisions" => "RetsSubDivision", 
                                            "retsschooldistricts" => "RetsSchoolDistrict", 
                                            "retsareas" => "RetsArea", 
                                            "retslogoes" => "RetsLogo", 
                                            "genericretssearchlistings" => "GenericRetsSearchListing", 
                                            "genericretssearchlistingsxmls" => "GenericRetsSearchListingsXML", 
                                            "ineacounties" => "INEACounty", 
                                            "genericretsdetaillistings" => "GenericRetsDetailListing");
            $this->_entityType2Set = array(
                                            "listingimage" => "ListingImages", 
                                            "lcborsubdivision" => "LCBORSubDivisions", 
                                            "retscity" => "RetsCities", 
                                            "retscounty" => "RetsCounties", 
                                            "lcbordetaillisting" => "LCBORDetailListings", 
                                            "lcborsearchlisting" => "LCBORSearchListings", 
                                            "ineadetaillisting" => "INEADetailListings", 
                                            "ineasearchlisting" => "INEASearchListings", 
                                            "ineacity" => "INEACities", 
                                            "retsproperty" => "RetsProperties", 
                                            "retslistingimage" => "RetsListingImages", 
                                            "retsprovidername" => "RetsProviderNames", 
                                            "retssearchlisting" => "RetsSearchListings", 
                                            "retslistingsstatu" => "RetsListingsStatus", 
                                            "retslisting" => "RetsListings", 
                                            "retselementaryschool" => "RetsElementarySchools", 
                                            "retshighschool" => "RetsHighSchools", 
                                            "retsmiddleschool" => "RetsMiddleSchools", 
                                            "retssubdivision" => "RetsSubDivisions", 
                                            "retsschooldistrict" => "RetsSchoolDistricts", 
                                            "retsarea" => "RetsAreas", 
                                            "retslogo" => "RetsLogoes", 
                                            "genericretssearchlisting" => "GenericRetsSearchListings", 
                                            "genericretssearchlistingsxml" => "GenericRetsSearchListingsXMLs", 
                                            "ineacounty" => "INEACounties", 
                                            "genericretsdetaillisting" => "GenericRetsDetailListings");

            $this->_association = array();

    
            $this->_ListingImages = new DataServiceQuery('/'.'ListingImages', $this);
            $this->_LCBORSubDivisions = new DataServiceQuery('/'.'LCBORSubDivisions', $this);
            $this->_RetsCities = new DataServiceQuery('/'.'RetsCities', $this);
            $this->_RetsCounties = new DataServiceQuery('/'.'RetsCounties', $this);
            $this->_LCBORDetailListings = new DataServiceQuery('/'.'LCBORDetailListings', $this);
            $this->_LCBORSearchListings = new DataServiceQuery('/'.'LCBORSearchListings', $this);
            $this->_INEADetailListings = new DataServiceQuery('/'.'INEADetailListings', $this);
            $this->_INEASearchListings = new DataServiceQuery('/'.'INEASearchListings', $this);
            $this->_INEACities = new DataServiceQuery('/'.'INEACities', $this);
            $this->_RetsProperties = new DataServiceQuery('/'.'RetsProperties', $this);
            $this->_RetsListingImages = new DataServiceQuery('/'.'RetsListingImages', $this);
            $this->_RetsProviderNames = new DataServiceQuery('/'.'RetsProviderNames', $this);
            $this->_RetsSearchListings = new DataServiceQuery('/'.'RetsSearchListings', $this);
            $this->_RetsListingsStatus = new DataServiceQuery('/'.'RetsListingsStatus', $this);
            $this->_RetsListings = new DataServiceQuery('/'.'RetsListings', $this);
            $this->_RetsElementarySchools = new DataServiceQuery('/'.'RetsElementarySchools', $this);
            $this->_RetsHighSchools = new DataServiceQuery('/'.'RetsHighSchools', $this);
            $this->_RetsMiddleSchools = new DataServiceQuery('/'.'RetsMiddleSchools', $this);
            $this->_RetsSubDivisions = new DataServiceQuery('/'.'RetsSubDivisions', $this);
            $this->_RetsSchoolDistricts = new DataServiceQuery('/'.'RetsSchoolDistricts', $this);
            $this->_RetsAreas = new DataServiceQuery('/'.'RetsAreas', $this);
            $this->_RetsLogoes = new DataServiceQuery('/'.'RetsLogoes', $this);
            $this->_GenericRetsSearchListings = new DataServiceQuery('/'.'GenericRetsSearchListings', $this);
            $this->_GenericRetsSearchListingsXMLs = new DataServiceQuery('/'.'GenericRetsSearchListingsXMLs', $this);
            $this->_INEACounties = new DataServiceQuery('/'.'INEACounties', $this);
            $this->_GenericRetsDetailListings = new DataServiceQuery('/'.'GenericRetsDetailListings', $this);

        }

    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset ListingImages
         * @return DataServiceQuery
         */
        public function ListingImages()
        {
            $this->_ListingImages->ClearAllOptions();
            return $this->_ListingImages;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset LCBORSubDivisions
         * @return DataServiceQuery
         */
        public function LCBORSubDivisions()
        {
            $this->_LCBORSubDivisions->ClearAllOptions();
            return $this->_LCBORSubDivisions;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset RetsCities
         * @return DataServiceQuery
         */
        public function RetsCities()
        {
            $this->_RetsCities->ClearAllOptions();
            return $this->_RetsCities;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset RetsCounties
         * @return DataServiceQuery
         */
        public function RetsCounties()
        {
            $this->_RetsCounties->ClearAllOptions();
            return $this->_RetsCounties;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset LCBORDetailListings
         * @return DataServiceQuery
         */
        public function LCBORDetailListings()
        {
            $this->_LCBORDetailListings->ClearAllOptions();
            return $this->_LCBORDetailListings;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset LCBORSearchListings
         * @return DataServiceQuery
         */
        public function LCBORSearchListings()
        {
            $this->_LCBORSearchListings->ClearAllOptions();
            return $this->_LCBORSearchListings;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset INEADetailListings
         * @return DataServiceQuery
         */
        public function INEADetailListings()
        {
            $this->_INEADetailListings->ClearAllOptions();
            return $this->_INEADetailListings;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset INEASearchListings
         * @return DataServiceQuery
         */
        public function INEASearchListings()
        {
            $this->_INEASearchListings->ClearAllOptions();
            return $this->_INEASearchListings;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset INEACities
         * @return DataServiceQuery
         */
        public function INEACities()
        {
            $this->_INEACities->ClearAllOptions();
            return $this->_INEACities;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset RetsProperties
         * @return DataServiceQuery
         */
        public function RetsProperties()
        {
            $this->_RetsProperties->ClearAllOptions();
            return $this->_RetsProperties;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset RetsListingImages
         * @return DataServiceQuery
         */
        public function RetsListingImages()
        {
            $this->_RetsListingImages->ClearAllOptions();
            return $this->_RetsListingImages;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset RetsProviderNames
         * @return DataServiceQuery
         */
        public function RetsProviderNames()
        {
            $this->_RetsProviderNames->ClearAllOptions();
            return $this->_RetsProviderNames;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset RetsSearchListings
         * @return DataServiceQuery
         */
        public function RetsSearchListings()
        {
            $this->_RetsSearchListings->ClearAllOptions();
            return $this->_RetsSearchListings;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset RetsListingsStatus
         * @return DataServiceQuery
         */
        public function RetsListingsStatus()
        {
            $this->_RetsListingsStatus->ClearAllOptions();
            return $this->_RetsListingsStatus;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset RetsListings
         * @return DataServiceQuery
         */
        public function RetsListings()
        {
            $this->_RetsListings->ClearAllOptions();
            return $this->_RetsListings;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset RetsElementarySchools
         * @return DataServiceQuery
         */
        public function RetsElementarySchools()
        {
            $this->_RetsElementarySchools->ClearAllOptions();
            return $this->_RetsElementarySchools;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset RetsHighSchools
         * @return DataServiceQuery
         */
        public function RetsHighSchools()
        {
            $this->_RetsHighSchools->ClearAllOptions();
            return $this->_RetsHighSchools;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset RetsMiddleSchools
         * @return DataServiceQuery
         */
        public function RetsMiddleSchools()
        {
            $this->_RetsMiddleSchools->ClearAllOptions();
            return $this->_RetsMiddleSchools;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset RetsSubDivisions
         * @return DataServiceQuery
         */
        public function RetsSubDivisions()
        {
            $this->_RetsSubDivisions->ClearAllOptions();
            return $this->_RetsSubDivisions;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset RetsSchoolDistricts
         * @return DataServiceQuery
         */
        public function RetsSchoolDistricts()
        {
            $this->_RetsSchoolDistricts->ClearAllOptions();
            return $this->_RetsSchoolDistricts;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset RetsAreas
         * @return DataServiceQuery
         */
        public function RetsAreas()
        {
            $this->_RetsAreas->ClearAllOptions();
            return $this->_RetsAreas;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset RetsLogoes
         * @return DataServiceQuery
         */
        public function RetsLogoes()
        {
            $this->_RetsLogoes->ClearAllOptions();
            return $this->_RetsLogoes;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset GenericRetsSearchListings
         * @return DataServiceQuery
         */
        public function GenericRetsSearchListings()
        {
            $this->_GenericRetsSearchListings->ClearAllOptions();
            return $this->_GenericRetsSearchListings;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset GenericRetsSearchListingsXMLs
         * @return DataServiceQuery
         */
        public function GenericRetsSearchListingsXMLs()
        {
            $this->_GenericRetsSearchListingsXMLs->ClearAllOptions();
            return $this->_GenericRetsSearchListingsXMLs;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset INEACounties
         * @return DataServiceQuery
         */
        public function INEACounties()
        {
            $this->_INEACounties->ClearAllOptions();
            return $this->_INEACounties;
        }
    
        /**
         * Function returns DataServiceQuery reference for
         * the entityset GenericRetsDetailListings
         * @return DataServiceQuery
         */
        public function GenericRetsDetailListings()
        {
            $this->_GenericRetsDetailListings->ClearAllOptions();
            return $this->_GenericRetsDetailListings;
        }
    
       /**
        * Functions for adding object to the entityset/collection
        */
    
       /**
        * Add ListingImages
        * @param ListingImages $object
        */
      public function AddToListingImages($object)
        {
            return parent::AddObject('ListingImages', $object);
        }
    
       /**
        * Add LCBORSubDivisions
        * @param LCBORSubDivisions $object
        */
      public function AddToLCBORSubDivisions($object)
        {
            return parent::AddObject('LCBORSubDivisions', $object);
        }
    
       /**
        * Add RetsCities
        * @param RetsCities $object
        */
      public function AddToRetsCities($object)
        {
            return parent::AddObject('RetsCities', $object);
        }
    
       /**
        * Add RetsCounties
        * @param RetsCounties $object
        */
      public function AddToRetsCounties($object)
        {
            return parent::AddObject('RetsCounties', $object);
        }
    
       /**
        * Add LCBORDetailListings
        * @param LCBORDetailListings $object
        */
      public function AddToLCBORDetailListings($object)
        {
            return parent::AddObject('LCBORDetailListings', $object);
        }
    
       /**
        * Add LCBORSearchListings
        * @param LCBORSearchListings $object
        */
      public function AddToLCBORSearchListings($object)
        {
            return parent::AddObject('LCBORSearchListings', $object);
        }
    
       /**
        * Add INEADetailListings
        * @param INEADetailListings $object
        */
      public function AddToINEADetailListings($object)
        {
            return parent::AddObject('INEADetailListings', $object);
        }
    
       /**
        * Add INEASearchListings
        * @param INEASearchListings $object
        */
      public function AddToINEASearchListings($object)
        {
            return parent::AddObject('INEASearchListings', $object);
        }
    
       /**
        * Add INEACities
        * @param INEACities $object
        */
      public function AddToINEACities($object)
        {
            return parent::AddObject('INEACities', $object);
        }
    
       /**
        * Add RetsProperties
        * @param RetsProperties $object
        */
      public function AddToRetsProperties($object)
        {
            return parent::AddObject('RetsProperties', $object);
        }
    
       /**
        * Add RetsListingImages
        * @param RetsListingImages $object
        */
      public function AddToRetsListingImages($object)
        {
            return parent::AddObject('RetsListingImages', $object);
        }
    
       /**
        * Add RetsProviderNames
        * @param RetsProviderNames $object
        */
      public function AddToRetsProviderNames($object)
        {
            return parent::AddObject('RetsProviderNames', $object);
        }
    
       /**
        * Add RetsSearchListings
        * @param RetsSearchListings $object
        */
      public function AddToRetsSearchListings($object)
        {
            return parent::AddObject('RetsSearchListings', $object);
        }
    
       /**
        * Add RetsListingsStatus
        * @param RetsListingsStatus $object
        */
      public function AddToRetsListingsStatus($object)
        {
            return parent::AddObject('RetsListingsStatus', $object);
        }
    
       /**
        * Add RetsListings
        * @param RetsListings $object
        */
      public function AddToRetsListings($object)
        {
            return parent::AddObject('RetsListings', $object);
        }
    
       /**
        * Add RetsElementarySchools
        * @param RetsElementarySchools $object
        */
      public function AddToRetsElementarySchools($object)
        {
            return parent::AddObject('RetsElementarySchools', $object);
        }
    
       /**
        * Add RetsHighSchools
        * @param RetsHighSchools $object
        */
      public function AddToRetsHighSchools($object)
        {
            return parent::AddObject('RetsHighSchools', $object);
        }
    
       /**
        * Add RetsMiddleSchools
        * @param RetsMiddleSchools $object
        */
      public function AddToRetsMiddleSchools($object)
        {
            return parent::AddObject('RetsMiddleSchools', $object);
        }
    
       /**
        * Add RetsSubDivisions
        * @param RetsSubDivisions $object
        */
      public function AddToRetsSubDivisions($object)
        {
            return parent::AddObject('RetsSubDivisions', $object);
        }
    
       /**
        * Add RetsSchoolDistricts
        * @param RetsSchoolDistricts $object
        */
      public function AddToRetsSchoolDistricts($object)
        {
            return parent::AddObject('RetsSchoolDistricts', $object);
        }
    
       /**
        * Add RetsAreas
        * @param RetsAreas $object
        */
      public function AddToRetsAreas($object)
        {
            return parent::AddObject('RetsAreas', $object);
        }
    
       /**
        * Add RetsLogoes
        * @param RetsLogoes $object
        */
      public function AddToRetsLogoes($object)
        {
            return parent::AddObject('RetsLogoes', $object);
        }
    
       /**
        * Add GenericRetsSearchListings
        * @param GenericRetsSearchListings $object
        */
      public function AddToGenericRetsSearchListings($object)
        {
            return parent::AddObject('GenericRetsSearchListings', $object);
        }
    
       /**
        * Add GenericRetsSearchListingsXMLs
        * @param GenericRetsSearchListingsXMLs $object
        */
      public function AddToGenericRetsSearchListingsXMLs($object)
        {
            return parent::AddObject('GenericRetsSearchListingsXMLs', $object);
        }
    
       /**
        * Add INEACounties
        * @param INEACounties $object
        */
      public function AddToINEACounties($object)
        {
            return parent::AddObject('INEACounties', $object);
        }
    
       /**
        * Add GenericRetsDetailListings
        * @param GenericRetsDetailListings $object
        */
      public function AddToGenericRetsDetailListings($object)
        {
            return parent::AddObject('GenericRetsDetailListings', $object);
        }
    

       /**
        * This function returns the entities.
        */
        public function getEntities()
        {
            return $this->_entities;
        }
    }
  
?>
  